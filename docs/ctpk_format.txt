######################################################################
                         CTPK HEADER
######################################################################


=======================================================================
  offset | len | Meaning
=======================================================================
       0 |  4  | 'CTPK' Magic bytes
       4 |  8  | Unkown
     0xC |  4  | Offset to start of string section
    0x10 |  4  | Offset to start of Data section
    0x14 |  4  | Unkown
=======================================================================




######################################################################
                         STRING SECTION
######################################################################


=======================STRING SECTION HEADER===========================
  offset | len | Meaning
=======================================================================
       0 |  4  | Number of strings (NSTRINGS)
       4 |  .  | String objects (Size: NSTRINGS)
=======================================================================

========================STRING OBJECTS=================================
  offset | len | Meaning
=======================================================================
       0 |  4  | Length of String (STRLEN)
---------|-----|-------------------------------------------------------
       4 |  .  | UTF-8 Encoded String object
         |     |   Is STRLEN character long ( may be made up of
         |     |   bytes due to encoding.
=======================================================================





######################################################################
                          DATA SECTION
######################################################################


========================DATA SECTION HEADER============================
  offset | len       | Meaning
=======================================================================
       0 |  4        | Number of data sections (DATALEN)
       4 | DATALEN*8 | Data sections
=======================================================================

============================DATA SECTIONS==============================
  offset | len | Meaning
=======================================================================
       0 |  4  | Section ID (used in code to identify section types)
       4 |  4  | Offset to SECTION DATA
=======================================================================

============================SECTION DATA===============================
  offset | len | Meaning
=======================================================================
       0 |  4  | Number of data objects
       4 |  .  | Array of DATA OBJECT
=======================================================================

=============================DATA OBJECT===============================
  offset |  len | Meaning
=======================================================================
       0 |   4  | Object ID
       4 |   4  | Length of PACKED DATA (PLEN)
       8 | PLEN | PACKED DATA relative to object
=======================================================================




######################################################################
                          PACKED DATA
######################################################################

PACKED data is stored by bit packing. It is subdivided into a number
of different sections, each is preceded by a 1 to 5 byte header as 
described below. The header specifies the section ID which is
referenced to a struct in the game executable desribing some of its
properites (unkown format at the moment), in addition to the length
of the data. Parsing of the header is described below.

See CatalogSectionDef structs in ida database

Length: 1-5 bytes

                         
==============================  BYTE 0  ===============================
  bits | Meaning
=======================================================================
  0-2  | DataLength type
       | 000: DATA_LENGTH_VARIABLE (MAX 10 stream bytes)
       | 001: DATA_LENGTH_8        (DATALEN = 8)
       | 010: DATA_LENGTH_ENCODED 
       | 101: DATA_LENGTH_4        (DATALEN = 4)
-------|--------------------------------------------------------------        
  3-6  | Low 4 bits of Section ID
-------|--------------------------------------------------------------
    7  | Section ID Encoding
       | 0: SMALL_SECTION_ID ( 4 bit ID )
       | 1: LARGE_SECTION_ID ( 11-32 bit ID)
=======================================================================

IF LARGE_SECTION_ID:
    Length: 1 - 4 bytes
    
    =====================  BYTE N  ==========================
      bits | Meaning
    =========================================================
      0-6  | Section ID Data
    -------|-------------------------------------------------       
        7  | Is header data
           | 0: NO - stop reading as header
           | 1: YES
    =========================================================
    
IF DATA_LENGTH_ENCODED:
    Length 1-5 bytes:
    
    =====================  BYTE N  ==========================
      bits | Meaning
    =========================================================
      0-6  | Section Length Data (DATALEN)
    -------|-------------------------------------------------       
        7  | Is header data
           | 0: NO - stop reading as header
           | 1: YES
    =========================================================
    
    
    
    
######################################################################
                         SECTION DATA
######################################################################

IF DATA_LENGTH_VARIABLE:
    Length 1-10 bytes
    =====================  BYTE N  ==========================
      bits | Meaning
    =========================================================
      0-6  | Section Length Data
    -------|-------------------------------------------------       
        7  | Terminator
           | 0: LAST BYTE
           | 1: CONTINUE READING
    =========================================================
    
ELSE READ DATALEN BYTES